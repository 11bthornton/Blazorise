@page "/docs/extensions/datagrid"

<DocsPageTitle>
    DataGrid
</DocsPageTitle>

<DocsPageParagraph>
    To create a basic grid in Blazorise you need to set the Column that will define the grid structure and behavior.
</DocsPageParagraph>

<ul>
    <li>
        <Code>DataGrid</Code> the main <Strong>container</Strong>
        <ul>
            <li>
                <Code>DataGridColumns</Code> container for datagrid columns
                <ul>
                    <li><Code>DataGridColumn</Code> column template for text editor</li>
                    <li><Code>DataGridNumericColumn</Code> column template for numeric values</li>
                    <li><Code>DataGridDateColumn</Code> column template for datetime values</li>
                    <li><Code>DataGridCheckColumn</Code> column template for boolean values</li>
                    <li><Code>DataGridSelectColumn</Code> column template for selectable values</li>
                    <li><Code>DataGridCommandColumn</Code> column template for editing commands like Edit, Save, Cancel, etc.</li>
                </ul>
            </li>
            <li>
                <Code>DataGridAggregates</Code> container for datagrid aggregates
                <ul>
                    <li><Code>DataGridAggregate</Code> defines the column and aggregation function type</li>
                </ul>
            </li>

        </ul>
    </li>
</ul>

<DocsPageSubtitle>
    Installation
</DocsPageSubtitle>

<DocsPageSection>
    <DocsPageSectionHeader Title="NuGet">
        Install extension from NuGet.
    </DocsPageSectionHeader>
    <DocsPageSectionSource Code="DataGridNugetInstallExample"></DocsPageSectionSource>
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Imports">
        In your main Imports.razor add:
    </DocsPageSectionHeader>
    <DocsPageSectionSource Code="DataGridImportsExample"></DocsPageSectionSource>
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Static files">
        Include the necessary file into your <Code>index.html</Code> or <Code>_Host.cshtml</Code> file, depending if you’re using a Blazor WebAssembly or Blazor Server side project.
    </DocsPageSectionHeader>
    <DocsPageSectionSource Code="DataGridResourcesExample" />
</DocsPageSection>

<DocsPageSubtitle>
    Features
</DocsPageSubtitle>

<DocsPageSection>
    <DocsPageSectionHeader Title="Sorting">
        All columns can be sorted automatically if the option <Code>Sortable</Code> is enabled on the column.
    </DocsPageSectionHeader>
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Filtering">
        Use an attribute <Code>Filterable</Code> to enable or disable automatic filtering in grid component.

        Default method for filtering is <Code>Contains</Code>. If you want to change it you can set the <Code>FilterMethod</Code> attribute on data grid. Supported methods are:
        <ul>
            <li><Code>Contains</Code> search for any occurrence (default)</li>
            <li><Code>StartsWith</Code> search only the beginning</li>
            <li><Code>EndsWith</Code> search only the ending</li>
            <li><Code>Equals</Code> search must match the entire value</li>
            <li><Code>NotEquals</Code> opposite of Equals</li>
        </ul>
    </DocsPageSectionHeader>
    <DocsPageSectionContent>
        <DataGridFilterExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="DataGridFilterExample" />
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Custom Filtering">
        Regular filter works on per field basis. To enable advanced search capabilities you can use an attribute <Code>CustomFilter</Code>. More can be found in Usage section.
    </DocsPageSectionHeader>
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Paging">
        Paging is handled automatically by the <Code>DataGrid</Code>. You also have some additional attributes to configure paging based on your requirements.
    </DocsPageSectionHeader>
    <DocsPageSectionContent>
        <ul>
            <li><Code>ShowPager</Code> to hide or show pagination controls</li>
            <li><Code>PageSize</Code> the maximum number of items for each page.</li>
            <li><Code>CurrentPage</Code> current page number.</li>
            <li><Code>PreviousPageButtonTemplate</Code> template for previous page button</li>
            <li><Code>NextPageButtonTemplate</Code> template for next page button</li>
            <li><Code>FirstPageButtonTemplate</Code> template for first page button</li>
            <li><Code>LastPageButtonTemplate</Code> template for last page button</li>
            <li><Code>PageButtonTemplate</Code> template for explicated page button with <Code>PageButtonContext</Code> as parameter</li>
        </ul>
    </DocsPageSectionContent>
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Editing">
        The grid can perform some basic CRUD operations on the supplied <Code>Data</Code> collection. To enable editing on data-grid just set the <Code>Editable</Code> attribute to true.

        By default every time the <Code>Item</Code> is saved it will be automatically handled by the data-grid itself. That means that all its fields will be populated after the user clicks on Save button. If you want to change that, you can just disable it by setting the <Code>UseInternalEditing</Code> to false.
    </DocsPageSectionHeader>
    <DocsPageSectionContent>
        The grid can work in two different editing modes that can provide different user experiences.
        <ul>
            <li><Code>Form</Code> editing is done in the internal DataGrid form</li>
            <li><Code>Inline</Code> editing is done in the current row</li>
            <li><Code>Popup</Code> editing is done in the the modal dialog</li>
        </ul>
    </DocsPageSectionContent>
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Cascading values">
        In some case you want to update a different cell in a DataGrid when you update a value. This can be achieved with an <Code>UpdateCell</Code> method. You have two ways of updating a cell:
        <ul>
            <li>by calling <Code>UpdateCell</Code> on the context inside of <Code>EditTemplate</Code>, or</li>
            <li>by calling <Code>UpdateCellEditValue</Code> on the <Code>DataGrid</Code> instance</li>
        </ul>

        In the following example we’re simply calling <Code>context.UpdateCell</Code> with a field-name to change and a new value that we want it to assign:
    </DocsPageSectionHeader>
    <DocsPageSectionContent>
        <DataGridUpdateCellExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="DataGridUpdateCellExample" />
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Selecting">
        If you need to control how and when the grid row will be selected you can use a <Code>RowSelectable</Code> event handler. A simple example is:
    </DocsPageSectionHeader>
    <DocsPageSectionContent>
        <DataGridSelectingExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="DataGridSelectingExample" />
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Large Data">
        By default, <Code>DataGrid</Code> will load everything in memory and it will perform the necessary operations like paging, sorting and filtering. For large datasets this is impractical and so for these scenarios it is advised to load data page-by-page. This is accomplished with the use of <Code>ReadData</Code> event handler and <Code>TotalItems</Code> attribute. When you define the usage of <Code>ReadData</Code> the <Code>DataGrid</Code> will automatically switch to manual mode and every interaction with the grid will be proxied through the <Code>ReadData</Code>. This means that you as a developer will be responsible for all the loading, filtering and sorting of the data.
        <ul>
            <li><Code>ReadData</Code> event handler used to handle the loading of data</li>
            <li><Code>TotalItems</Code> total number of items in the source data-set</li>
        </ul>

        Bellow you can find a basic example of how to load large data and apply it to the <Code>DataGrid</Code>
    </DocsPageSectionHeader>
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Virtualization">
        By setting <Code>Virtualize</Code>, you will enable virtualize capabilities on the <Code>DataGrid</Code>, meaning that instead of having pagination, you’ll be able to scroll across the data with perceived improved performance.

        Virtualization is a technique for limiting UI rendering to just the parts that are currently visible. For example, virtualization is helpful when the app must render a long list of items and only a subset of items is required to be visible at any given time.

        You will still have access to every available <Code>DataGrid</Code> feature. <Code>VirtualizeOptions</Code> allows to further customize the <Code>Virtualize</Code> feature.
    </DocsPageSectionHeader>
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Aggregates">
        The <Code>DataGrid</Code> provider several built-in aggregates for column values. Supported aggregate functions are:
        <ul>
            <li><Code>Sum</Code> Calculate total(sum) value of the collection.</li>
            <li><Code>Average</Code> Calculates the average of the numeric items in the collection.</li>
            <li><Code>Min</Code> Finds the smallest value in the collection.</li>
            <li><Code>Max</Code> Finds the largest value in the collection.</li>
            <li><Code>Count</Code> Counts the elements in a collection.</li>
            <li><Code>TrueCount</Code> Counts boolean elements with true value.</li>
            <li><Code>FalseCount</Code> Counts boolean elements with false value.</li>
        </ul>
    </DocsPageSectionHeader>
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Validations">
        The <Code>DataGrid</Code> provides validations of column values at editing or creating items. For using validation of <Code>DataGrid</Code> you have to use these properties:
        <ul>
            <li>UseValidation must be set to true to enable validation.</li>
            <li>ShowValidationFeedback of DataGrid to hide or show feedback for validation.</li>
            <li>ShowValidationsSummary of DataGrid to hide or show validations summary.</li>
            <li>ValidationsSummaryLabel of DataGrid to set label of validations summary.</li>
            <li>Validator of DataGridColumn validates the input value after trying to save.</li>
            <li>ValidationPattern of DataGridColumn forces validation to use regex pattern matching instead of default validator handler.</li>
        </ul>
        By default, <Code>DataGrid</Code> will use data-annotation to validate editing fields. You only need to define them on your model and they will automatically be picked up by the grid.
    </DocsPageSectionHeader>
    <DocsPageSectionSource Code="DataGridAnnotationExample" />
    <DocsPageSectionContent>
        <Alert Visible="true" Color="Color.Warning">
            <AlertDescription>
                <Strong>Note:</Strong> Don’t forget to enable validation by setting <Code>UseValidation="true"</Code>.
            </AlertDescription>
        </Alert>
    </DocsPageSectionContent>
    <DocsPageSectionContent>
        To override data-annotation you only need to define a <Code>Validator</Code> attribute and assign it to your validation method.
        <DataGridValidatorExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="DataGridValidatorExample" />
    <DocsPageSectionContent>
        If you use <Code>EditTemplate</Code> to customize editing of columns, then using <Code>Validator</Code> or <Code>ValidationPattern</Code> will not work and you have to use <Code>Validation</Code> like this:
        <DataGridValidatorEditTemplateExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="DataGridValidatorEditTemplateExample" />
</DocsPageSection>

<DocsPageSubtitle>
    Usage
</DocsPageSubtitle>

<DocsPageSection>
    <DocsPageSectionHeader Title="DataGrid">
        For DataGrid the required fields are <Code>TItem</Code> typeparam and Data attribute. Other attributes on the <Code>DataGrid</Code> are optional.
    </DocsPageSectionHeader>
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Columns">
        Next you must set the Columns that you want to see in the grid. When defining the columns the required fields are:

        <Code>TItem</Code> this is always the same model as on <Code>DataGrid</Code>.
        <Code>Field</Code> name of the field in the supplied model.
        <Code>Caption</Code> the column caption text.
    </DocsPageSectionHeader>
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Nested fields">
        Field attribute also supports nested fields. You can define a column with field name like <Code>"City.Country.Name"</Code> and it will work. Just keep in mind that when editing nested fields they must be initialized first or otherwise they will raise an exception.
    </DocsPageSectionHeader>
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Basic Example">
    </DocsPageSectionHeader>
    <DocsPageSectionContent>
        <DataGridExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="DataGridExample" />
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Large Example">
        Just as in the previous example everything is the same except that now we must define the attribute <Code>ReadData</Code> and <Code>TotalItems</Code>. They’re used to handle all of the loading, filtering and sorting of an actual data.
    </DocsPageSectionHeader>
    <DocsPageSectionContent>
        <DataGridLargeDataExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="DataGridLargeDataExample" />
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Aggregates">
        DataGrid will automatically generate necessary group cells based on the defined <Code>DataGridAggregate</Code> options.
    </DocsPageSectionHeader>
    <DocsPageSectionContent>
        <DataGridAggregatesExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="DataGridAggregatesExample" />
    <DocsPageSectionContent>
        By default all aggregate operations are run on in-memory <Code>Data</Code>. When working with large datasets that is not possible. So just as in the previous examples for large datasets you need to work with <Code>ReadData</Code> and set the <Code>AggregateData</Code> property.
    </DocsPageSectionContent>
    <DocsPageSectionContent>
        <DataGridAggregatesLargeDataExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="DataGridAggregatesLargeDataExample" />
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Custom Filtering">
        Filter API is fairly straightforward. All you need is to attach <Code>CustomFilter</Code> to a function and bind search value to <Code>TextEdit</Code> field. DataGrid will automatically respond to entered value.
    </DocsPageSectionHeader>
    <DocsPageSectionContent>
        <DataGridCustomFilteringExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="DataGridCustomFilteringExample" />
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Custom Column Filtering">
        Similar to the DataGrid custom filtering it is also possible to use custom filtering on per-column basis.
    </DocsPageSectionHeader>
    <DocsPageSectionContent>
        <DataGridCustomColumnFilteringExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="DataGridCustomColumnFilteringExample" />
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Custom Row Colors">
        You have full control over appearance of each row, including the selected rows.
    </DocsPageSectionHeader>
    <DocsPageSectionContent>
        <DataGridCustomRowColorsExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="DataGridCustomRowColorsExample" />
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="NewItemDefaultSetter">
        <Code>NewItemDefaultSetter</Code> function is used to set default values when new item is created and before the edit form is shown. It will only be evaluate, if <Code>DataGrid</Code> is editable.
    </DocsPageSectionHeader>
    <DocsPageSectionContent>
        <DataGridNewItemDefaultSetterExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="DataGridNewItemDefaultSetterExample" />
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Templates">
        For extra customization <Code>DataGrid</Code> will provide you with two additional templates that you can use to extend it’s default behavior. A display template is used to customize display cells and an edit template is used to customize cell editors. You can place anything inside of the templates, be it a Blazorise components, regular html tags or your own components.

        Both templates have a special <Code>context</Code> attribute that is used to give access to the underline cell value. To learn more about <Code>context</Code> please go to official <Blazorise.Link To="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/templated-components?view=aspnetcore-5.0" Target="Target.Blank">Blazor documentation</Blazorise.Link>.
    </DocsPageSectionHeader>
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="DisplayTemplate">
        Display template is using <Code>TItem</Code> as a context value.
    </DocsPageSectionHeader>
    <DocsPageSectionContent>
        <DataGridDisplayTemplateExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="DataGridDisplayTemplateExample" />
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="EditTemplate">
        Edit template will give you a way to handle the editing of grid cell values. For this template <Code>CellEditContext</Code> is used as a <Code>context</Code> value. Use it to get or set the cell values.
    </DocsPageSectionHeader>
    <DocsPageSectionContent>
        <DataGridEditTemplateExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="DataGridEditTemplateExample" />
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="DetailRowTemplate">
        <Code>DetailRowTemplate</Code> allows you to display nested structure bellow each row in the grid. One of the examples is “master-detail” relationship between two data-source inside the <Code>DataGrid</Code>.

        For this template the <Code>context</Code> value is the item from the parent grid.

        Once it’s defined a DetailRow will be visible for every row in the grid. If you want to control the visibility of detail-row you can use <Code>DetailRowTrigger</Code> attribute that can be defined in it’s parent grid.
    </DocsPageSectionHeader>
    <DocsPageSectionContent>
        <DataGridDetailRowTemplateExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="DataGridDetailRowTemplateExample" />
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Command Templates">
        If you want to change default buttons you can use following templates
        <ul>
            <li>NewCommandTemplate</li>
            <li>EditCommandTemplate</li>
            <li>SaveCommandTemplate</li>
            <li>CancelCommandTemplate</li>
            <li>DeleteCommandTemplate</li>
            <li>ClearFilterCommandTemplate</li>
        </ul>
    </DocsPageSectionHeader>
    <DocsPageSectionContent>
        <DataGridCommandTemplatesExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="DataGridCommandTemplatesExample" />
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Loading Templates">
        If you want to change display of content, while grid is empty or <Code>ReadData</Code> is executing, you can use following templates:
        <ul>
            <li>EmptyTemplate</li>
            <li>LoadingTemplate</li>
        </ul>
    </DocsPageSectionHeader>
    <DocsPageSectionContent>
        <DataGridLoadingEmptyTemplateExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="DataGridLoadingEmptyTemplateExample" />
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Multiple Selection">
        Set <Code>SelectionMode</Code> to <Code>DataGridSelectionMode.Multiple</Code> to enable multiple selection on Datagrid.
        Clicking rows will now select multiple records at a time. You can now access them by using the <Code>SelectedRows</Code> parameter and also bind to the <Code>SelectedRowsChanged</Code> event callback.

        Optionally you can use the new Datagrid column <Code>DataGridMultiSelectColumn</Code> to enable a checkbox column that works exclusively with multiple selection. You can either use your own <Code>MultiSelectTemplate</Code> render fragment to customize the input that will appear in the column and trigger the multiple selection by then binding to the provided <Code>SelectedChanged</Code> event callback or just use the provided default by not specifying a <Code>MultiSelectTemplate</Code> render fragment. When using this extra column, the top row column, will provide the ability to select or unselect all rows.
    </DocsPageSectionHeader>
    <DocsPageSectionContent>
        <DataGridMultipleSelectionExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="DataGridMultipleSelectionExample" />
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="ButtonRow">
        Provide a <Code>ButtonRowTemplate</Code> and have the <Code>DataGridCommandMode</Code> set to either <Code>Default</Code> or <Code>ButtonRow</Code>.

        The template has access to the internal commands so you’re also able to construct your own buttons on the pager that can also trigger the Datagrid’s CRUD and clear filter operations as shown in the example below:
    </DocsPageSectionHeader>
    <DocsPageSectionContent>
        <DataGridButtonRowExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="DataGridButtonRowExample" />
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Resizable">
        Set <Code>Resizable</Code> to <Code>true</Code> and you’ll be able to resize the datagrid columns.
    </DocsPageSectionHeader>
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="EditMode">
        Specifies the grid editing modes.
        <ul>
            <li><Code>Form</Code> editing is done in the internal <Code>DataGrid</Code> form</li>
            <li><Code>Inline</Code> editing is done in the current row</li>
            <li><Code>Popup</Code> editing is done in the the modal dialog</li>
        </ul>
    </DocsPageSectionHeader>
</DocsPageSection>

<DocsPageSubtitle>
    Attributes
</DocsPageSubtitle>

<DocsAttributes Title="DataGrid">
    <DocsAttributesItem Name="Data" Type="IEnumerable<TItem>">
        Grid data-source.
    </DocsAttributesItem>
    <DocsAttributesItem Name="EditMode" Type="EditMode" Default="Form">
        Specifies the grid editing modes.
    </DocsAttributesItem>
    <DocsAttributesItem Name="UseInternalEditing" Type="bool" Default="true">
        Specifies the behavior of DataGrid editing.
    </DocsAttributesItem>
    <DocsAttributesItem Name="Editable" Type="bool" Default="false">
        Whether users can edit DataGrid rows.
    </DocsAttributesItem>
    <DocsAttributesItem Name="Resizable" Type="bool" Default="false">
        Whether users can resize DataGrid columns.
    </DocsAttributesItem>
    <DocsAttributesItem Name="ResizeMode" Type="TableResizeMode" Default="Header">
        Defines the resize mode of the data grid columns.
    </DocsAttributesItem>
    <DocsAttributesItem Name="Sortable" Type="bool" Default="true">
        Whether end-users can sort data by the column’s values.
    </DocsAttributesItem>
    <DocsAttributesItem Name="ShowCaptions" Type="bool" Default="true">
        Gets or sets whether user can see a column captions.
    </DocsAttributesItem>
    <DocsAttributesItem Name="Filterable" Type="bool" Default="false">
        Whether users can filter rows by its cell values.
    </DocsAttributesItem>
    <DocsAttributesItem Name="ShowPager" Type="bool" Default="false">
        Whether users can navigate DataGrid by using pagination controls.
    </DocsAttributesItem>
    <DocsAttributesItem Name="CurrentPage" Type="int" Default="1">
        Current page number.
    </DocsAttributesItem>
    <DocsAttributesItem Name="PageSize" Type="int" Default="5">
        Maximum number of items for each page.
    </DocsAttributesItem>
    <DocsAttributesItem Name="Striped" Type="bool" Default="false">
        Adds stripes to the table.
    </DocsAttributesItem>
    <DocsAttributesItem Name="Bordered" Type="bool" Default="false">
        Adds borders to all the cells.
    </DocsAttributesItem>
    <DocsAttributesItem Name="Borderless" Type="bool" Default="false">
        Makes the table without any borders.
    </DocsAttributesItem>
    <DocsAttributesItem Name="Hoverable" Type="bool" Default="false">
        Adds a hover effect when moussing over rows.
    </DocsAttributesItem>
    <DocsAttributesItem Name="Narrow" Type="bool" Default="false">
        Makes the table more compact by cutting cell padding in half.
    </DocsAttributesItem>
    <DocsAttributesItem Name="Responsive" Type="bool" Default="false">
        Makes table responsive by adding the horizontal scroll bar.
    </DocsAttributesItem>
    <DocsAttributesItem Name="ReadData" Type="EventCallback">
        Handles the manual loading of large data sets.
    </DocsAttributesItem>
    <DocsAttributesItem Name="SelectedRow" Type="TItem">
        Currently selected row.
    </DocsAttributesItem>
    <DocsAttributesItem Name="SelectedRowChanged" Type="EventCallback">
        Occurs after the selected row has changed.
    </DocsAttributesItem>
    <DocsAttributesItem Name="RowSelectable" Type="Func<TItem,bool>">
        Handles the selection of the clicked row. If not set it will default to always true.
    </DocsAttributesItem>
    <DocsAttributesItem Name="RowHoverCursor" Type="Func<TItem,Blazorise.Cursor>">
        Handles the selection of the cursor for a hovered row. If not set, Blazorise.Cursor.Pointer` will be used.
    </DocsAttributesItem>
    <DocsAttributesItem Name="DetailRowTrigger" Type="Func<TItem,bool>">
        A trigger function used to handle the visibility of detail row.
    </DocsAttributesItem>
    <DocsAttributesItem Name="RowInserting" Type="EventCallback<CancellableRowChange<TItem, Dictionary<string, object>>>">
        Cancelable event called before the row is inserted.
    </DocsAttributesItem>
    <DocsAttributesItem Name="RowUpdating" Type="EventCallback<CancellableRowChange<TItem, Dictionary<string, object>>>">
        Cancelable event called before the row is updated.
    </DocsAttributesItem>
    <DocsAttributesItem Name="RowRemoving" Type="EventCallback<CancellableRowChange<TItem>>">
        Cancelable event called before the row is removed.
    </DocsAttributesItem>
    <DocsAttributesItem Name="RowInserted" Type="EventCallback<SavedRowItem<TItem, Dictionary<string, object>>>">
        Event called after the row is inserted.
    </DocsAttributesItem>
    <DocsAttributesItem Name="RowUpdated" Type="EventCallback<SavedRowItem<TItem, Dictionary<string, object>>>">
        Event called after the row is updated.
    </DocsAttributesItem>
    <DocsAttributesItem Name="RowRemoved" Type="EventCallback<TItem>">
        Event called after the row is removed.
    </DocsAttributesItem>
    <DocsAttributesItem Name="PageChanged" Type="EventCallback">
        Occurs after the selected page has changed.
    </DocsAttributesItem>
    <DocsAttributesItem Name="EmptyCellTemplate" Type="RenderFragment">
        Define the display template for empty data cell.
    </DocsAttributesItem>
    <DocsAttributesItem Name="EmptyTemplate" Type="RenderFragment">
        Define the display template for empty data collection.
    </DocsAttributesItem>
    <DocsAttributesItem Name="EmptyFilterTemplate" Type="RenderFragment">
        Define the display template for empty filter data collection.
    </DocsAttributesItem>
    <DocsAttributesItem Name="LoadingTemplate" Type="RenderFragment">
        Define the display template for empty filter data collection.
    </DocsAttributesItem>
    <DocsAttributesItem Name="PopupSize" Type="ModalSize" Default="Default">
        Defines the size of popup modal.
    </DocsAttributesItem>
    <DocsAttributesItem Name="PopupTitleTemplate" Type="	RenderFragment<PopupTitleContext<TItem>>">
        Template for custom title of edit popup dialog
    </DocsAttributesItem>
    <DocsAttributesItem Name="NewItemDefaultSetter" Type="	Action<TItem>">
        Action will be called for setting default values of property, when create new entry
    </DocsAttributesItem>
    <DocsAttributesItem Name="PageButtonTemplate" Type="	RenderTemplate<PageButtonContext>">
        Define the format a pagination button
    </DocsAttributesItem>
    <DocsAttributesItem Name="UseValidation" Type="bool" Default="false">
        If true, validation will be used when editing the fields
    </DocsAttributesItem>
    <DocsAttributesItem Name="ShowValidationFeedback" Type="bool" Default="false">
        Hide or show feedback for validation
    </DocsAttributesItem>
    <DocsAttributesItem Name="ShowValidationsSummary" Type="bool" Default="true">
        Hide or show validations summary
    </DocsAttributesItem>
    <DocsAttributesItem Name="ValidationsSummaryLabel" Type="string" Default="null">
        Label for validations summary.
    </DocsAttributesItem>
    <DocsAttributesItem Name="ValidationsSummaryErrors" Type="string[]" Default="null">
        List of custom error messages for the validations summary.
    </DocsAttributesItem>
    <DocsAttributesItem Name="SortMode" Type="DataGridSortMode" Default="Multiple">
        Defines whether the user can sort only by one column or by multiple.
    </DocsAttributesItem>
    <DocsAttributesItem Name="SelectionMode" Type="DataGridSelectionMode" Default="Single">
        Defines whether the datagrid is set to single or multiple selection mode
    </DocsAttributesItem>
    <DocsAttributesItem Name="Localizers" Type="DataGridLocalizers">
        Custom localizer handlers to override default localization.
    </DocsAttributesItem>
    <DocsAttributesItem Name="CommandMode" Type="DataGridCommandMode" Default="Default">
        Defines whether the datagrid renders both commands and button row or just either one of them.
    </DocsAttributesItem>
    <DocsAttributesItem Name="PagerPosition" Type="DataGridPagerPosition" Default="Bottom	">
        Defines the position of the pager.
    </DocsAttributesItem>
    <DocsAttributesItem Name="ShowPageSizes" Type="bool" Default="false">
        Defines whether users can adjust the page size of the datagrid.
    </DocsAttributesItem>
    <DocsAttributesItem Name="Virtualize" Type="bool" Default="false">
        Gets or sets whether the datagrid will use the Virtualize functionality.
    </DocsAttributesItem>
    <DocsAttributesItem Name="VirtualizeOptions" Type="VirtualizeOptions" Default="null">
        Gets or sets Virtualize options when using the Virtualize functionality.
    </DocsAttributesItem>
</DocsAttributes>

<DocsAttributes Title="DataGridColumn">
    <DocsAttributesItem Name="Field" Type="string">
        TItem data field name.
    </DocsAttributesItem>
    <DocsAttributesItem Name="Caption" Type="string">
        Column’s display caption. It will be displayed, if ColumnTemplate is not set.
    </DocsAttributesItem>
    <DocsAttributesItem Name="Filter" Type="FilterContext">
        Filter value for this column.
    </DocsAttributesItem>
    <DocsAttributesItem Name="SortDirection" Type="SortDirection" Default="None">
        Column initial sort direction.
    </DocsAttributesItem>
    <DocsAttributesItem Name="TextAlignment" Type="TextAlignment" Default="None">
        Defines the alignment for display cell.
    </DocsAttributesItem>
    <DocsAttributesItem Name="HeaderTextAlignment" Type="TextAlignment" Default="None">
        Defines the alignment for column header cell.
    </DocsAttributesItem>
    <DocsAttributesItem Name="Editable" Type="bool" Default="false">
        Whether users can edit cell values under this column.
    </DocsAttributesItem>
    <DocsAttributesItem Name="Displayable" Type="bool" Default="false	">
        Whether column can be displayed on a grid.
    </DocsAttributesItem>
    <DocsAttributesItem Name="DisplayOrder" Type="int" Default="0">
        Where column will be displayed on a grid.
    </DocsAttributesItem>
    <DocsAttributesItem Name="Sortable" Type="bool" Default="true">
        Whether end-users can sort data by the column’s values.
    </DocsAttributesItem>
    <DocsAttributesItem Name="Readonly" Type="bool" Default="false">
        Whether end-users are prevented from editing the column’s cell values.
    </DocsAttributesItem>
    <DocsAttributesItem Name="ShowCaption" Type="bool" Default="true">
        Whether the column’s caption is displayed within the column header.
    </DocsAttributesItem>
    <DocsAttributesItem Name="Filterable" Type="bool" Default="true">
        Whether users can filter rows by its cell values.
    </DocsAttributesItem>
    <DocsAttributesItem Name="Width" Type="string" Default="null">
        The width of the column.
    </DocsAttributesItem>
    <DocsAttributesItem Name="DisplayFormat" Type="string">
        Defines the format for display value.
    </DocsAttributesItem>
    <DocsAttributesItem Name="DisplayFormatProvider" Type="IFormatProvider">
        Defines the format provider info for display value.
    </DocsAttributesItem>
    <DocsAttributesItem Name="CellClass" Type="Func<TItem, string>">
        Custom classname handler for cell based on the current row item.
    </DocsAttributesItem>
    <DocsAttributesItem Name="CellStyle" Type="Func<TItem, string>	">
        Custom style handler for cell based on the current row item.
    </DocsAttributesItem>
    <DocsAttributesItem Name="HeaderCellClass" Type="string">
        Custom classname for header cell.
    </DocsAttributesItem>
    <DocsAttributesItem Name="HeaderCellStyle" Type="string">
        Custom style for header cell.
    </DocsAttributesItem>
    <DocsAttributesItem Name="FilterCellClass" Type="string">
        Custom classname for filter cell.
    </DocsAttributesItem>
    <DocsAttributesItem Name="FilterCellStyle" Type="string">
        Custom style for filter cell.
    </DocsAttributesItem>
    <DocsAttributesItem Name="GroupCellClass" Type="string">
        Custom classname for group cell.
    </DocsAttributesItem>
    <DocsAttributesItem Name="GroupCellStyle" Type="string">
        Custom style for group cell.
    </DocsAttributesItem>
    <DocsAttributesItem Name="DisplayTemplate" Type="RenderFragment<TItem>">
        Template for custom cell display formating.
    </DocsAttributesItem>
    <DocsAttributesItem Name="EditTemplate" Type="RenderFragment<CellEditContext>">
        Template for custom cell editing.
    </DocsAttributesItem>
    <DocsAttributesItem Name="FilterTemplate" Type="RenderFragment<FilterContext>	">
        Template for custom column filter rendering.
    </DocsAttributesItem>
    <DocsAttributesItem Name="PopupFieldColumnSize" Type="IFluentColumn" Default="IsHalf.OnDesktop">
        Defines the size of field for popup modal.
    </DocsAttributesItem>
    <DocsAttributesItem Name="CaptionTemplate" Type="RenderFragment<DataGridColumn<TItem>>">
        Template for custom caption. CaptionTemplate will block caption template.
    </DocsAttributesItem>
    <DocsAttributesItem Name="SortDirectionTemplate" Type="RenderFragment<SortDirection>">
        Template for custom sort direction icon.
    </DocsAttributesItem>
    <DocsAttributesItem Name="Validator" Type="Action<ValidatorEventArgs>">
        Validates the input value after trying to save.
    </DocsAttributesItem>
    <DocsAttributesItem Name="ValidationPattern" Type="string">
        Forces validation to use regex pattern matching instead of default validator handler.
    </DocsAttributesItem>
    <DocsAttributesItem Name="CustomFilter" Type="DataGridColumnCustomFilter">
        Custom filter function used to override internal filtering.
    </DocsAttributesItem>
</DocsAttributes>