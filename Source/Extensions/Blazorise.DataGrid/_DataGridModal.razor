@typeparam TItem
@inherits _BaseDataGridModal<TItem>
<Modal Visible="@PopupVisible" Closed="@Cancel">
    <ModalBackdrop />
    <ModalContent Size="@PopupSize">
        <ModalHeader>
            <ModalTitle>
                @if ( TitleTemplate != null && EditItem != null )
                {
                    @TitleTemplate( new PopupTitleContext<TItem>( EditItem, EditState, EditState == DataGridEditState.Edit ? Localizer["Edit"] : Localizer["Create"] ) )
                }
                else
                {
                    @(EditState == DataGridEditState.Edit ? Localizer["Row Edit"] : Localizer["Row Create"])
                }
            </ModalTitle>
            <CloseButton Clicked="@Cancel" />
        </ModalHeader>
        <ModalBody>
            <Validations @ref="validations" Mode="ValidationMode.Manual" StatusChanged="@ValidationsStatusChanged">
                @if ( ParentDataGrid?.ShowValidationsSummary ?? true )
                {
                    <ValidationSummary Label="@ParentDataGrid?.ValidationsSummaryLabel" />
                }
                <Fields>
                    @foreach ( var column in Columns )
                    {
                        @if ( column.ExcludeFromEdit )
                            continue;

                        @if ( column.CellValueIsEditable )
                        {
                            <Field ColumnSize="@column.PopupFieldColumnSize" Padding="Blazorise.Padding.Is2.OnX.Is2.OnY">
                                <FieldLabel>
                                    @column.Caption
                                </FieldLabel>
                                <FieldBody>
                                    <_DataGridCell TItem="TItem" Column="@column" Item="@EditItem" CellEditContext="@EditItemCellValues[column.ElementId]" ShowValidationFeedback="@(ParentDataGrid?.ShowValidationFeedback ?? false)" />
                                </FieldBody>
                            </Field>
                        }
                    }
                </Fields>
            </Validations>
        </ModalBody>
        <ModalFooter>
            @if ( ParentDataGrid?.CommandColumn?.SaveCommandAllowed == true )
            {
                @if ( ParentDataGrid?.CommandColumn?.SaveCommandTemplate != null )
                {
                    @ParentDataGrid.CommandColumn.SaveCommandTemplate( new CommandContext<TItem>
                    {
                        Clicked = callbackFactory.Create( this, SaveWithValidation ),
                        LocalizationString = Localizer["Save"],
                        Item = EditItem,
                    } )
                }
                else
                {
                    <Button Color="Color.Link" Clicked="@SaveWithValidation">
                        @Localizer["Save"]
                    </Button>
                }
            }
            @if ( ParentDataGrid?.CommandColumn?.CancelCommandAllowed == true )
            {
                @if ( ParentDataGrid?.CommandColumn?.CancelCommandTemplate != null )
                {
                    @ParentDataGrid.CommandColumn.CancelCommandTemplate( new CommandContext<TItem>
                    {
                        Clicked = Cancel,
                        LocalizationString = Localizer["Cancel"],
                        Item = EditItem,
                    } )
                }
                else
                {
                    <Button Color="Color.Link" Clicked="@Cancel">
                        @Localizer["Cancel"]
                    </Button>
                }
            }
        </ModalFooter>
    </ModalContent>
</Modal>